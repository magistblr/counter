{"version":3,"sources":["components/Display.module.css","components/Button.module.css","components/NumberCount.module.css","App.module.css","components/Button.tsx","components/NumberCount.tsx","components/Counter.tsx","components/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","descr","callback","count","maxValue","incorrectClass","startValue","disableSet","useState","valueButton","setValueButton","useEffect","className","s","btn_wrapper","onClick","btn","disabled","NumberCount","text","disable","setText","setTextClass","correct","incorrect","wrapper","number_red","number","Counter","descrReset","descrInc","titleMax","titleStart","app_wrapper","app","display","ss","counter_wrapper","Settings","descrSet","callbackInputValueStart","callbackInputValueMax","setDisable","setCount","valueMax","setValueMax","valueStart","setValueStart","valueStorageMax","localStorage","getItem","newValueMax","JSON","parse","valueStorageStart","newValueStart","setItem","stringify","inputClass","input_incorrect","input","wrapper_input","onChange","e","currentTarget","value","type","step","settings_wrapper","App","setMaxValue","setStartValue","onText","onclick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43c03e1a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Display_wrapper__2RSdU\",\"app\":\"Display_app__1tihj\",\"display\":\"Display_display__2i0BY\",\"display_count_red\":\"Display_display_count_red__4GqtD\",\"wrapper_input\":\"Display_wrapper_input__1a81D\",\"input\":\"Display_input__3Mhwe\",\"input_incorrect\":\"Display_input_incorrect__2CjmF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter_wrapper\":\"Button_counter_wrapper__3p3qP\",\"btn\":\"Button_btn__3CgDu\",\"settings_wrapper\":\"Button_settings_wrapper__3-gnV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"NumberCount_wrapper__1N5Tl\",\"number\":\"NumberCount_number__3naVe\",\"number_red\":\"NumberCount_number_red__2MuG6\",\"incorrect\":\"NumberCount_incorrect__rs1wy\",\"correct\":\"NumberCount_correct__1_Ob8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app_wrapper\":\"App_app_wrapper__12Ayt\"};","import React, { useEffect, useState } from 'react';\r\nimport { TitleType } from '../App';\r\nimport s from './Button.module.css';\r\n\r\nexport type ButtonType = {\r\n  descr: TitleType\r\n  callback: (value: string) => void\r\n  count: number\r\n  maxValue: number\r\n  incorrectClass: boolean\r\n  startValue: number\r\n  text: string\r\n  disableSet: boolean\r\n};\r\n\r\n\r\nexport const Button: React.FC<ButtonType> = ({descr, callback, count, maxValue, incorrectClass, startValue, disableSet}) => {\r\n\r\n  let [valueButton, setValueButton] = useState<TitleType>(\"\")\r\n\r\n\r\n  useEffect(() => {\r\n    if(descr === \"inc\"){\r\n      valueButton = \"inc\"\r\n      setValueButton(valueButton)\r\n    }if(descr === \"reset\"){\r\n      valueButton = \"reset\"\r\n      setValueButton(valueButton)\r\n    }if(descr === \"set\"){\r\n      valueButton = \"set\"\r\n      setValueButton(valueButton)\r\n    }\r\n  }, [])\r\n\r\n\r\n  const onclick = () => {\r\n    if(valueButton === \"inc\"){\r\n      callback(\"inc\")\r\n    }if(valueButton === \"reset\"){\r\n      callback(\"reset\")\r\n    }if(valueButton === \"set\"){\r\n      callback(\"set\")\r\n    }\r\n  }\r\n\r\n  const disable = () => {\r\n    if((valueButton === \"inc\") && ((!disableSet) || (count === maxValue) || incorrectClass)){\r\n      return true\r\n    }if((valueButton === \"reset\") && ((count <= startValue) || (!disableSet) || incorrectClass)){\r\n      return true\r\n    }if((valueButton === \"set\") && (disableSet) || incorrectClass){\r\n      return true\r\n    } else return false\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className={s.btn_wrapper}>\r\n      <button\r\n        onClick={() => {onclick()}}\r\n        className={s.btn}\r\n        disabled={disable()}\r\n        >\r\n        {valueButton}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react'\r\nimport s from \"./NumberCount.module.css\"\r\n\r\nexport type NumberType = {\r\n  count: number\r\n  maxValue: number\r\n  text: string\r\n  incorrectClass: boolean\r\n  disable: boolean\r\n}\r\n\r\n\r\nexport const NumberCount: React.FC<NumberType> = ({count, maxValue, text, incorrectClass, disable}) => {\r\n\r\n\r\n  let setText = (text === \"enter values and press 'set'\") && !disable ? text : incorrectClass\r\n  let setTextClass = text === \"enter values and press 'set'\" ? s.correct : s.incorrect\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      {setText\r\n      ? <span className={setTextClass}>{text}</span>\r\n      : <span className={count === maxValue ? s.number_red : s.number}>{count}</span>}\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Button } from './Button'\r\nimport s from \"./Display.module.css\"\r\nimport {NumberCount} from './NumberCount'\r\nimport ss from './Button.module.css'\r\nimport { TitleType } from '../App'\r\n\r\nexport type CounterType = {\r\n  count: number\r\n  descrInc: TitleType\r\n  descrReset: TitleType\r\n  callback: (value: string) => void\r\n  titleMax: number\r\n  titleStart: number\r\n  incorrectClass: boolean\r\n  text: string\r\n  disable: boolean\r\n}\r\n\r\n\r\nexport const Counter: React.FC<CounterType> = ({count, descrReset, descrInc,callback, titleMax, incorrectClass, titleStart, text, disable}) => {\r\n  return (\r\n    <div className={s.app_wrapper}>\r\n      <div className={s.app}>\r\n        <div className={s.display}>\r\n          <NumberCount count={count} maxValue={titleMax} incorrectClass={incorrectClass} text={text} disable={disable}/>\r\n        </div>\r\n        <div className={ss.counter_wrapper}>\r\n          <Button descr={descrInc} callback={callback} count={count}  maxValue={titleMax} incorrectClass={incorrectClass} startValue={titleStart} text={text} disableSet={disable}/>\r\n          <Button descr={descrReset} callback={callback} count={count}  maxValue={titleMax} incorrectClass={incorrectClass} startValue={titleStart} text={text} disableSet={disable}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, { ChangeEvent, HtmlHTMLAttributes, useEffect, useState } from 'react'\r\nimport { TitleType } from '../App'\r\nimport { Button } from './Button'\r\nimport s from \"./Display.module.css\"\r\nimport ss from './Button.module.css'\r\n\r\nexport type SettingsType = {\r\n  count: number\r\n  descrSet: TitleType\r\n  callback: (value: string) => void\r\n  titleMax: number\r\n  titleStart: number\r\n  callbackInputValueStart: (value: number) => void\r\n  callbackInputValueMax: (value: number) => void\r\n  incorrectClass: boolean\r\n  text: string\r\n  disable: boolean\r\n  setDisable: (value: boolean) => void\r\n  setText: (value: string) => void\r\n  setCount:(value: number) => void\r\n}\r\n\r\nexport const Settings: React.FC<SettingsType> = ({descrSet, callback, titleStart, titleMax, callbackInputValueStart, callbackInputValueMax,count, incorrectClass, text, disable, setDisable, setCount}) => {\r\n\r\n  let [valueMax, setValueMax] = useState(0)\r\n  let [valueStart, setValueStart] = useState(0)\r\n\r\n  useEffect(() => {\r\n    let valueStorageMax = localStorage.getItem('maxValue')\r\n    if (valueStorageMax){\r\n      let newValueMax = JSON.parse(valueStorageMax)\r\n      setValueMax(newValueMax)\r\n    }\r\n    let valueStorageStart = localStorage.getItem('startValue')\r\n    if (valueStorageStart){\r\n      let newValueStart = JSON.parse(valueStorageStart)\r\n      setValueStart(newValueStart)\r\n    }\r\n  }, [])\r\n\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('maxValue', JSON.stringify(valueMax))\r\n    localStorage.setItem('startValue', JSON.stringify(valueStart))\r\n  }, [valueMax, valueStart])\r\n\r\n\r\n  const onChangeMaxHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setValueMax(+e.currentTarget.value)\r\n    setCount(-1)\r\n    setDisable(false)\r\n  }\r\n  callbackInputValueMax(valueMax)\r\n\r\n  const onChangeStartHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setValueStart(+e.currentTarget.value)\r\n    setCount(-1)\r\n    setDisable(false)\r\n  }\r\n  callbackInputValueStart(valueStart)\r\n\r\n\r\n  let inputClass = incorrectClass ? s.input_incorrect : s.input\r\n\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <div className={s.app}>\r\n        <div className={s.display}>\r\n          <div className={s.wrapper_input}>\r\n            <span className={s.text}>max value</span>\r\n            <input className={inputClass} onChange={onChangeMaxHandler} type=\"number\" step=\"1\" value={titleMax}/>\r\n          </div>\r\n          <div className={s.wrapper_input}>\r\n            <span className={s.text}>start value</span>\r\n            <input className={inputClass} onChange={onChangeStartHandler} type=\"number\" step=\"1\" value={titleStart}/>\r\n          </div>\r\n        </div>\r\n        <div className={ss.settings_wrapper}>\r\n          <Button descr={descrSet} callback={callback} count={count} maxValue={titleMax} incorrectClass={incorrectClass} startValue={titleStart} text={text} disableSet={disable}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n","import React, {useEffect, useState } from 'react';\nimport './App.module.css';\nimport { Counter } from './components/Counter';\nimport s from \"./App.module.css\"\nimport {Settings} from './components/Settings';\n\n\nexport type TitleType = \"inc\" | \"reset\" | \"set\" | \"\"\n\n\n\nexport const App = () => {\n\n  let descrInc: TitleType = \"inc\"\n  let descrReset: TitleType = \"reset\"\n  let descrSet: TitleType = \"set\"\n\n  let [count, setCount] = useState(0)\n  let [maxValue, setMaxValue] = useState(0)\n  let [startValue, setStartValue] = useState(0)\n  let [text, setText] = useState(\"\")\n  let [disable, setDisable] = useState(false)\n\n\n\n\n  const incorrectClass: boolean = (startValue < 0) || (maxValue < 0) || (startValue >= maxValue)\n\n  const incorrect = \"Incorrect value!\"\n\n    const onText = () => {\n      if(incorrectClass){\n        setText(incorrect)\n      }if(!disable && !incorrectClass){\n        setText(\"enter values and press 'set'\")\n      }\n    }\n\n\n\n    const inputValueMax = (value: number) => {\n      onText()\n      setMaxValue(value)\n    }\n    \n    const inputValueStart = (value: number) => {\n      onText()\n      setStartValue(value)\n    }\n    \n    const incCount = () => {\n      onText()\n      if(count < maxValue){\n        setCount(count + 1)\n      }\n    }\n    \n    const resetCount = () => {\n      onText()\n      setCount(count = startValue)\n    }\n    \n    function settingsCount() {\n      onText()\n      setDisable(true)\n      return setCount(startValue)\n    }\n\n  const onclick = (value: string) => {\n      onText()\n      if(value === \"inc\"){\n        incCount()\n      }if(value === \"reset\"){\n        resetCount()\n      }if(value === \"set\"){\n        settingsCount()\n    }\n  }\n\n\n \n\n  return (\n    <div className={s.app_wrapper}>\n        <Settings count={count}\n                  descrSet={descrSet}\n                  callback={onclick}\n                  titleMax={maxValue}\n                  titleStart={startValue}\n                  callbackInputValueStart={inputValueStart}\n                  callbackInputValueMax={inputValueMax}\n                  incorrectClass={incorrectClass}\n                  text={text}\n                  disable={disable}\n                  setDisable={setDisable}\n                  setText={setText}\n                  setCount={setCount}\n                  />\n        <Counter  count={count}\n                  callback={onclick}\n                  descrInc={descrInc}\n                  descrReset={descrReset}\n                  titleMax={maxValue}\n                  titleStart={startValue}\n                  incorrectClass={incorrectClass}\n                  text={text}\n                  disable={disable}\n                  />\n    </div>\n  );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}